# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Run test against new Core Pkg

on:
  workflow_dispatch:
    inputs:
      core_pkg_version:
        description: 'Core pkg version'
        required: true

jobs:
  build-test-env:
    name: Build test env
    runs-on: ubuntu-latest
    steps:
      - env:
          EVENT_CONTEXT: ${{ toJSON(github.event) }}
        run: |
          echo $EVENT_CONTEXT
      - uses: actions/checkout@v4
      - name: Install dependencies
        uses: ./.github/actions/install
        with:
          core_pkg_version: ${{ inputs.core_pkg_version }}

  integration-test:
    name: Tests
    runs-on: ubuntu-latest
    needs: build-test-env
    # Postgres setup copied from https://gist.github.com/2color/537f8ef13ecec80059abb007839a6878
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --hostname postgres
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    strategy:
      max-parallel: 6
      fail-fast: false
      matrix:
        include:
          - app_name: 'scoutgame'
            test_command: |
              npm run typecheck -w apps/scoutgame
              dotenv -e .env.test.local -- npm run test -w packages/scoutgame
          - app_name: 'scoutgametelegram'
            test_command: |
              npm run typecheck -w apps/scoutgametelegram
              dotenv -e .env.test.local -- npm run test -w packages/scoutgametelegram
          - app_name: 'scoutgamecron'
            test_command: 'npm run typecheck -w apps/scoutgamecron'
          - app_name: 'admin'
            test_command: 'npm run typecheck -w apps/admin'

    steps:
      - uses: actions/checkout@v4

      - name: Restore dependencies from cache
        uses: ./.github/actions/install
        with:
          core_pkg_version: ${{ inputs.core_pkg_version }}

      - name: Setup test database
        run: npx dotenv -e .env.test.local -- npm run prisma:reset

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          mask-aws-account-id: 'no'

      - name: Restore app from cache
        uses: ./.github/actions/build
        with:
          app_name: ${{matrix.app_name}}
          REACT_APP_APP_ENV: 'test'

      - name: Run tests for ${{matrix.app_name}}
        run: ${{matrix.test_command}}
