name: Onchain Scoutgame Webapp CI

on:
  push:
    branches: [main]
    paths:
      - '.cdk/**'
      - 'docker-compose.yml'
      - '.github/actions/**'
      - '.github/workflows/deploy_onchain_scoutgame.yml'
      - 'package.json'
      - 'package-lock.json'
      - 'apps/scoutgame/**'
      - 'apps/onchain-scoutgame/**'
      - 'packages/**'
  pull_request:
    types: [labeled, opened, synchronize]
    branches: ['**']
    paths:
      - '.cdk/**'
      - 'docker-compose.yml'
      - '.github/actions/**'
      - '.github/workflows/deploy_onchain_scoutgame.yml'
      - 'package.json'
      - 'package-lock.json'
      - 'apps/scoutgame/**'
      - 'apps/onchain-scoutgame/**'
      - 'packages/**'

concurrency:
  group: ci-onchain-scoutgame-${{ github.event_name }}-${{ github.ref }}

jobs:
  build:
    name: Build onchain Scoutgame
    runs-on: ubuntu-latest
    outputs:
      head_commit_message: ${{ steps.setup_variables.outputs.commit_message }}
      deploy_staging: ${{ steps.setup_variables.outputs.deploy_staging }}
      skip_tests: ${{ steps.setup_variables.outputs.skip_tests }}
    steps:
      - name: Print Triggering event context payload
        env:
          workflow_event_context: ${{ toJSON(github.event) }}
        run: |
          echo "$workflow_event_context"
          echo "Workflow and code ref: ${{github.ref}}"

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup variables
        id: setup_variables
        # source https://github.com/orgs/community/discussions/28474
        run: |
          echo "commit_message=$(git show -s --format=%s)" >> "$GITHUB_OUTPUT"
          echo "deploy_staging=${{(github.event.action == 'labeled' && github.event.label.name == ':rocket: deploy-onchain-scoutgame') || (github.event.action != 'labeled' && contains(github.event.pull_request.labels.*.name, ':rocket: deploy-onchain-scoutgame'))}}" >> $GITHUB_OUTPUT
          echo "skip_tests=${{ contains(env.commit_message, 'skip-tests') }}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        uses: ./.github/actions/install
        with:
          app_name: scoutgame

      - name: Build app
        uses: ./.github/actions/build_app
        with:
          app_name: scoutgame

  upload-docker:
    name: Upload Docker image
    runs-on: ubuntu-latest
    # run whether previous jobs were successful or skipped
    if: |
      github.ref == 'refs/heads/main' || needs.build.outputs.deploy_staging == 'true'
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        uses: ./.github/actions/install
        with:
          app_name: scoutgame

      - name: Restore app from cache
        uses: ./.github/actions/build_app
        with:
          app_name: scoutgame

      - name: Update Dockerfile
        run: |
          rm Dockerfile && mv apps/scoutgame/Dockerfile Dockerfile

      - name: Build and Push Docker image
        id: docker_build_push
        uses: ./.github/actions/build_docker_image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
        with:
          ecr_registry: onchain-scoutgame

  upload-static-assets:
    name: Upload static assets
    runs-on: ubuntu-latest
    # run whether previous jobs were successful or skipped
    if: |
      (github.ref == 'refs/heads/main' && !(failure() || cancelled())) ||
      (needs.build.outputs.deploy_staging == 'true')
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        uses: ./.github/actions/install
        with:
          app_name: scoutgame

      - name: Calculate Build ID
        id: get_build_id
        run: |
          build_id=${{ hashFiles(format('apps/{0}/*.ts', 'scoutgame'), format('apps/{0}/*.tsx', 'scoutgame')) }}
          echo "build_id=$build_id" >> $GITHUB_OUTPUT

      - name: Restore app from cache
        uses: ./.github/actions/build_app
        with:
          app_name: scoutgame

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Upload static assets to S3
        run: |
          aws s3 sync apps/scoutgame/.next/static/ s3://charm.cdn/webapp-assets/_next/static/

      - name: Upload JS source maps to Datadog
        env:
          DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
        run: |
          npm install -g @datadog/datadog-ci
          datadog-ci sourcemaps upload apps/scoutgame/.next/static       \
            --service=onchain-scoutgame                              \
            --release-version=${{ steps.get_build_id.outputs.build_id }}  \
            --project-path=apps/scoutgame/ \
            --minified-path-prefix=https://cdn.charmverse.io/_next/static

  deploy-production:
    name: Deploy to production
    # run whether previous jobs were successful or skipped
    if: github.ref == 'refs/heads/main' && !(failure() || cancelled())
    needs: [upload-docker, upload-static-assets]

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/deploy_production
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          app_name: scoutgame
          app_config_override: onchain-scoutgame
          stack: prd-onchain-scoutgame

  deploy-staging:
    name: Deploy to staging

    if: needs.build.outputs.deploy_staging == 'true'
    runs-on: ubuntu-latest
    # prevent staging deploys + cleanup running in parallel
    concurrency: staging-${{ github.ref }}
    needs: [build, upload-docker]
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/deploy_staging
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          app_name: onchain-scoutgame
          app_config_override: onchain-scoutgame
          stack: stg-onchain-scoutgame

  discord-alert:
    name: Notify Discord of failure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && failure()
    # pass in all steps so we can check if any failed
    needs: [upload-docker, upload-static-assets, upload-docker, deploy-production]
    steps:
      - uses: actions/checkout@v4
      - name: Notify Discord
        uses: ./.github/actions/notify_error
        env:
          DISCORD_WARNINGS_WEBHOOK: ${{ secrets.DISCORD_WARNINGS_WEBHOOK }}
        with:
          app_name: onchain-scoutgame
