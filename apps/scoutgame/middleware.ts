import { getPlatform } from '@packages/mixpanel/platform';
import { getSession } from '@packages/nextjs/session/getSession';
import type { NextRequest } from 'next/server';
import { NextResponse } from 'next/server';

// These are the links that are only accessible to logged in users
const privateLinks = [
  '/profile',
  '/notifications',
  '/welcome',
  '/claim',
  '/builders-you-know',
  '/quests',
  '/accounts',
  '/projects'
];

export async function middleware(request: NextRequest) {
  const session = await getSession();
  const isLoggedIn = !!session.scoutId;
  const path = request.nextUrl.pathname;
  const response = NextResponse.next(); // Create a response object to set cookies
  const platform = getPlatform();

  if (!isLoggedIn && path !== '/home' && platform === 'telegram') {
    // eslint-disable-next-line no-console
    console.log('Redirecting to telegram loading screen', { path, platform, ...session });
    return NextResponse.redirect(new URL('/home', request.url));
  }

  // Redirect to login if anonymous user clicks on private links
  if (!isLoggedIn && privateLinks.some((link) => path.startsWith(link))) {
    // eslint-disable-next-line no-console
    console.log('Redirecting to login', { path, platform, ...session });
    return NextResponse.redirect(new URL('/login', request.url));
  }

  // Redirect to home if logged in user clicks on login
  if (isLoggedIn && (path === '/login' || path === '/' || path === '/home')) {
    // eslint-disable-next-line no-console
    console.log('Redirecting to scout page', { path, platform, session });
    return NextResponse.redirect(new URL('/scout', request.url));
  }

  return response;
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - images (image files)
     * - favicon.ico (favicon file)
     * - robots.txt (indexing file generated by nextjs)
     * - _ENV.js (file to handle env public variables)
     * - manifest.webmanifest (manifest created by nextjs)
     * - sw.js (service worker)
     */
    '/((?!api|_next/static|_next/image|images|favicon.ico|robots.txt|__ENV.js|manifest.webmanifest|sw.js).*)'
  ]
};
